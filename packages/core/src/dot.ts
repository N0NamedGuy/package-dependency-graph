import { Colors } from '.'

/**
 * @public
 */
export function toDotFile(dependencies: { [name: string]: (string[]) | { dependencies: string[], group: string } }) {
  const nodes = new Map<string, string>()
  const subgraphs: string[] = []
  const maps: string[] = []

  const colors = new Colors(2)

  if (Object.values(dependencies).some((d) => !Array.isArray(d))) {
    subgraphs.push('  graph [compound=true];')
  }
  const groups: Record<string, { items: string[], color: string }> = {}
  const packageGroups: Record<string, string> = {}
  for (const dependency in dependencies) {
    const dependents = dependencies[dependency]
    if (!Array.isArray(dependents)) {
      if (!groups[dependents.group]) {
        groups[dependents.group] = {
          items: [],
          color: colors.getNext(),
        }
      }
      groups[dependents.group].items.push(toName(dependency))
      packageGroups[dependency] = dependents.group
    }
  }

  const mapData: { from: string, to: string }[] = []
  for (const dependency in dependencies) {
    if (!nodes.has(dependency)) {
      nodes.set(dependency, colors.getNext())
    }
    const name = toName(dependency)
    const dependents = dependencies[dependency]
    for (const dependent of Array.isArray(dependents) ? dependents : dependents.dependencies) {
      let color = nodes.get(dependent)
      if (!color) {
        color = colors.getNext()
        nodes.set(dependent, color)
      }
      const fromGroup = packageGroups[dependency]
      const toGroup = packageGroups[dependent]
      const clusters: string[] = []
      if (fromGroup !== toGroup) {
        if (fromGroup) {
          clusters.push(`ltail=cluster_${toName(fromGroup)}`)
        }
        if (toGroup) {
          clusters.push(`lhead=cluster_${toName(toGroup)}`)
        }
        const newMapData = {
          from: fromGroup || dependency,
          to: toGroup || dependent,
        }
        if (mapData.every((m) => m.from !== newMapData.from || m.to !== newMapData.to)) {
          mapData.push(newMapData)
          if (clusters.length > 0) {
            maps.push(`  ${name} -> ${toName(dependent)}[color = "${color}" ${clusters.join(' ')}]`)
          } else {
            maps.push(`  ${name} -> ${toName(dependent)}[color = "${color}"]`)
          }
        }
      } else {
        maps.push(`  ${name} -> ${toName(dependent)}[color = "${color}"]`)
      }
    }
  }
  const nodeExpression = Array.from(nodes).map(([n, color]) => `  ${toName(n)}[label = "${n}", color = "${color}"]`)

  for (const groupName in groups) {
    subgraphs.push(`  subgraph cluster_${toName(groupName)} {
    ${groups[groupName].items.join(' ')};
    label = "${groupName}";
    color = "${groups[groupName].color}";
  }`)
  }

  return `// generated by package-dependency-graph
digraph {
${[...subgraphs, ...maps].join('\n')}

${nodeExpression.join('\n')}
}`
}

function toName(dependency: string) {
  return dependency.replace(/-/g, '_').replace(/\//g, '_').replace(/@/g, '_').replace(/ /g, '_')
}
