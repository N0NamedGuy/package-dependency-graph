import { Colors } from '.'

/**
 * @public
 */
export function toDotFile(dependencies: { [name: string]: string[] }) {
  const nodes = new Map<string, string>()
  const maps: string[] = []

  const colors = new Colors(2)

  for (const dependency in dependencies) {
    if (!nodes.has(dependency)) {
      nodes.set(dependency, colors.getNext())
    }
    const name = toName(dependency)
    for (const dependent of dependencies[dependency]) {
      let color = nodes.get(dependent)
      if (!color) {
        color = colors.getNext()
        nodes.set(dependent, color)
      }
      maps.push(`  ${name} -> ${toName(dependent)}[color = "${color}"]`)
    }
  }
  const nodeExpression = Array.from(nodes).map(([n, color]) => `  ${toName(n)}[label = "${n}", color = "${color}"]`)

  return `// generated by package-dependency-graph
digraph {
${maps.join('\n')}

${nodeExpression.join('\n')}
}`
}

function toName(dependency: string) {
  return dependency.replace(/-/g, '_').replace(/\//g, '_').replace(/@/g, '_')
}
